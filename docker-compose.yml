services:
  db:
    image: postgres:17.4-alpine3.21
    restart: "no"
    ports:
      - "5432:5432"
    volumes:
      - app-db17gr-data:/var/lib/postgresql/data/pgdata17m
    command: >
      postgres -c wal_level=logical
               -c max_replication_slots=10
               -c max_wal_senders=10
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata17m
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
  api:
    image: '${DOCKER_API_IMAGE?Variable not set}:${TAG-latest}'
    restart: "no"
    command: bash -c "bundle install && ./bin/rails s -p 80"
    ports:
      - "3000:80"
    working_dir: /app/api
    volumes:
      - ./services/api:/app/api
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    environment:
      - DOMAIN=${API_DOMAIN}
      - APP_DOMAIN=${APP_DOMAIN_NAME}
      - ENVIRONMENT=${ENVIRONMENT}
      - API_CORS_ORIGINS="${API_CORS_ORIGINS}"
      - SECRET_KEY_BASE=${SECRET_KEY?Variable not set}
      - POSTGRES_SERVER=db
      - RAILS_ENV=docker_dev
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - CACHE_API_VALKEY_URL=${CACHE_API_VALKEY_URL?Variable not set}
      - SIDEKIQ_API_VALKEY_URL=${SIDEKIQ_API_VALKEY_URL?Variable not set}
      - CABLE_VALKEY_URL=${CABLE_VALKEY_URL?Variable not set}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID?Variable not set}
      - COGNITO_REGION=${COGNITO_REGION?Variable not set}
      - COGNITO_ACCESS_KEY_ID=${COGNITO_ACCESS_KEY_ID?Variable not set}
      - COGNITO_SECRET_ACCESS_KEY=${COGNITO_SECRET_ACCESS_KEY?Variable not set}
      - AWS_BUCKET=${AWS_BUCKET?Variable not set}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID?Variable not set}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY?Variable not set}
      - AWS_BUCKET=${AWS_BUCKET?Variable not set}
    build:
      context: ./services
      dockerfile: Dockerfile.dev
      args:
        APP_DIR: api
        INSTALL_DEV: ${INSTALL_DEV-true}
    
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      - traefik.http.services.${STACK_NAME?Variable not set}-api.loadbalancer.server.port=80
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-http.rule=Host(`${API_DOMAIN?Variable not set}`)
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-http.entrypoints=http
      - traefik.http.routers.${STACK_NAME?Variable not set}-api-https.tls=false

  apisk:
    image: '${DOCKER_API_IMAGE?Variable not set}:${TAG-latest}'
    restart: "no"
    command: bash -c "bundle install && bundle exec sidekiq -C config/sidekiq.yml"
    working_dir: /app/api
    volumes:
      - ./services/api:/app/api
    networks:
      - traefik-public
      - default
    depends_on:
      - db
      - api
      - valkey
    environment:
      - API_DOMAIN=${API_DOMAIN_NAME?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - API_CORS_ORIGINS="${API_CORS_ORIGINS}"
      - SECRET_KEY_BASE=${SECRET_KEY?Variable not set}
      - POSTGRES_SERVER=db
      - RAILS_ENV=docker_dev
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - VALKEY_CACHE_URL=${CACHE_API_VALKEY_URL?Variable not set}
      - VALKEY_JOB_URL=${SIDEKIQ_API_VALKEY_URL?Variable not set}
      - VALKEY_CABLE_URL=${CABLE_VALKEY_URL?Variable not set}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID?Variable not set}
      - COGNITO_REGION=${COGNITO_REGION?Variable not set}
      - COGNITO_ACCESS_KEY_ID=${COGNITO_ACCESS_KEY_ID?Variable not set}
      - COGNITO_SECRET_ACCESS_KEY=${COGNITO_SECRET_ACCESS_KEY?Variable not set}
    build:
      context: ./services
      dockerfile: Dockerfile.dev
      args:
        APP_DIR: api
        INSTALL_DEV: ${INSTALL_DEV-true}
    
    labels:
      - traefik.enable=false
  valkey:
    image: valkey/valkey
    ports:
      - "6379:6379"
    volumes:
      - valkey-data:/data
    # command: [ "valkey-server", "--databases", "8" ]
  
  proxy:
    image: "traefik:v3.4"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - "80:80"
      - "8090:8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - "--providers.docker=true"
      # Add a constraint to only use services with the label for this stack
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable debug logging for local development
      - --log.level=DEBUG
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - "--api.insecure=true"
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=false
      - traefik.constraint-label=traefik-public
      # Dummy https-redirect middleware that doesn't really redirect, only to
      # allow running it locally
      - traefik.http.middlewares.https-redirect.contenttype.autodetect=false
    networks:
      - traefik-public
      - default
    depends_on:
      - api
volumes:
  app-db17gr-data:
  valkey-data:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: false